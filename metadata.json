[
  {
    "file": "/Users/user/Desktop/Akshay/llm-code-context-optimizer/sample_project/hello_world.py",
    "chunk": "def hello_world():\n    print(\"Hello, World!\")\n\nhello_world()"
  },
  {
    "file": "/Users/user/Desktop/Akshay/llm-code-context-optimizer/sample_project/file_handler.py",
    "chunk": "\"\"\"\nFile handler module for saving and loading calculation history\n\"\"\"\n\nimport json\nimport os\nfrom typing import List, Dict, Any\nfrom datetime import datetime\n\nclass FileHandler:\n    \"\"\"Handles file operations for the calculator application\"\"\"\n    \n    def __init__(self, filename: str = \"calculator_history.json\"):\n        \"\"\"Initialize file handler with specified filename\"\"\"\n        self.filename = filename\n        self.ensure_file_exists()\n    \n    def ensure_file_exists(self):\n        \"\"\"Create the history file if it doesn't exist\"\"\"\n        if not os.path.exists(self.filename):\n            self.save_history([])\n    \n    def save_history(self, history: List[str]) -> bool:\n        \"\"\"Save calculation history to file\"\"\"\n        try:\n            data = {\n                \"history\": history,\n                \"saved_at\": datetime.now().isoformat(),\n                \"total_calculations\": len(history)\n            }\n            \n            with open(self.filename, 'w', encoding='utf-8') as file:\n                json.dump(data, file, indent=2, ensure_ascii=False)\n            \n            return True\n            \n        except Exception as e:\n            print(f\"Error saving history: {e}\")\n            return False\n    \n    def load_history(self) -> List[str]:\n        \"\"\"Load calculation history from file\"\"\"\n        try:\n            if not os.path.exists(self.filename):\n                return []\n            \n            with open(self.filename, 'r', encoding='utf-8') as file:\n                data = json.load(file)\n            \n            # Handle both old format (list) and new format (dict)"
  },
  {
    "file": "/Users/user/Desktop/Akshay/llm-code-context-optimizer/sample_project/file_handler.py",
    "chunk": "if isinstance(data, list):\n                return data\n            elif isinstance(data, dict) and \"history\" in data:\n                return data[\"history\"]\n            else:\n                return []\n                \n        except Exception as e:\n            print(f\"Error loading history: {e}\")\n            return []\n    \n    def backup_history(self) -> bool:\n        \"\"\"Create a backup of the current history file\"\"\"\n        try:\n            backup_filename = f\"{self.filename}.backup.{datetime.now().strftime('%Y%m%d_%H%M%S')}\"\n            \n            if os.path.exists(self.filename):\n                import shutil\n                shutil.copy2(self.filename, backup_filename)\n                return True\n            \n            return False\n            \n        except Exception as e:\n            print(f\"Error creating backup: {e}\")\n            return False\n    \n    def get_file_info(self) -> Dict[str, Any]:\n        \"\"\"Get information about the history file\"\"\"\n        try:\n            if not os.path.exists(self.filename):\n                return {\"exists\": False}\n            \n            stat = os.stat(self.filename)\n            \n            return {\n                \"exists\": True,\n                \"size_bytes\": stat.st_size,\n                \"modified_time\": datetime.fromtimestamp(stat.st_mtime).isoformat(),\n                \"filename\": self.filename\n            }\n            \n        except Exception as e:\n            return {\"exists\": False, \"error\": str(e)}\n    \n    def clear_history_file(self) -> bool:\n        \"\"\"Clear the history file by saving an empty history\"\"\"\n        return self.save_history([])\n    \n    def export_to_text(self, output_filename: str = None) -> bool:"
  },
  {
    "file": "/Users/user/Desktop/Akshay/llm-code-context-optimizer/sample_project/file_handler.py",
    "chunk": "\"\"\"Export history to a readable text file\"\"\"\n        try:\n            if output_filename is None:\n                output_filename = f\"calculator_history_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt\"\n            \n            history = self.load_history()\n            \n            with open(output_filename, 'w', encoding='utf-8') as file:\n                file.write(\"Calculator History Export\\n\")\n                file.write(\"=\" * 30 + \"\\n\")\n                file.write(f\"Exported on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\\n\")\n                file.write(f\"Total calculations: {len(history)}\\n\\n\")\n                \n                for i, calculation in enumerate(history, 1):\n                    file.write(f\"{i:3d}. {calculation}\\n\")\n            \n            return True\n            \n        except Exception as e:\n            print(f\"Error exporting to text: {e}\")\n            return False"
  },
  {
    "file": "/Users/user/Desktop/Akshay/llm-code-context-optimizer/sample_project/config.py",
    "chunk": "\"\"\"\nConfiguration module for the calculator application\n\"\"\"\n\nimport os\nfrom typing import Dict, Any\n\nclass Config:\n    \"\"\"Configuration class for calculator application settings\"\"\"\n    \n    def __init__(self):\n        \"\"\"Initialize configuration with default values\"\"\"\n        self.history_file = self._get_env_or_default(\"CALC_HISTORY_FILE\", \"calculator_history.json\")\n        self.max_history_size = int(self._get_env_or_default(\"CALC_MAX_HISTORY\", \"50\"))\n        self.decimal_places = int(self._get_env_or_default(\"CALC_DECIMAL_PLACES\", \"4\"))\n        self.auto_save = self._get_env_or_default(\"CALC_AUTO_SAVE\", \"true\").lower() == \"true\"\n        self.backup_enabled = self._get_env_or_default(\"CALC_BACKUP\", \"false\").lower() == \"true\"\n        \n        # Application metadata\n        self.app_name = \"Simple Calculator\"\n        self.version = \"1.0.0\"\n        self.author = \"Test Project\"\n    \n    def _get_env_or_default(self, env_var: str, default: str) -> str:\n        \"\"\"Get environment variable or return default value\"\"\"\n        return os.getenv(env_var, default)\n    \n    def get_display_precision(self) -> int:\n        \"\"\"Get the number of decimal places for display\"\"\"\n        return self.decimal_places\n    \n    def should_auto_save(self) -> bool:\n        \"\"\"Check if auto-save is enabled\"\"\"\n        return self.auto_save\n    \n    def is_backup_enabled(self) -> bool:\n        \"\"\"Check if backup is enabled\"\"\"\n        return self.backup_enabled\n    \n    def get_history_file_path(self) -> str:\n        \"\"\"Get the full path to the history file\"\"\"\n        return os.path.abspath(self.history_file)\n    \n    def validate_settings(self) -> Dict[str, Any]:\n        \"\"\"Validate configuration settings and return status\"\"\"\n        issues = []\n        \n        # Check if history file directory exists\n        history_dir = os.path.dirname(self.get_history_file_path())\n        if not os.path.exists(history_dir):"
  },
  {
    "file": "/Users/user/Desktop/Akshay/llm-code-context-optimizer/sample_project/config.py",
    "chunk": "issues.append(f\"History file directory does not exist: {history_dir}\")\n        \n        # Check decimal places range\n        if self.decimal_places < 0 or self.decimal_places > 10:\n            issues.append(f\"Decimal places should be between 0 and 10, got: {self.decimal_places}\")\n        \n        # Check max history size\n        if self.max_history_size < 1 or self.max_history_size > 1000:\n            issues.append(f\"Max history size should be between 1 and 1000, got: {self.max_history_size}\")\n        \n        return {\n            \"valid\": len(issues) == 0,\n            \"issues\": issues,\n            \"settings\": self.to_dict()\n        }\n    \n    def to_dict(self) -> Dict[str, Any]:\n        \"\"\"Convert configuration to dictionary\"\"\"\n        return {\n            \"app_name\": self.app_name,\n            \"version\": self.version,\n            \"author\": self.author,\n            \"history_file\": self.history_file,\n            \"max_history_size\": self.max_history_size,\n            \"decimal_places\": self.decimal_places,\n            \"auto_save\": self.auto_save,\n            \"backup_enabled\": self.backup_enabled\n        }\n    \n    def update_from_dict(self, settings: Dict[str, Any]):\n        \"\"\"Update configuration from dictionary\"\"\"\n        for key, value in settings.items():\n            if hasattr(self, key):\n                setattr(self, key, value)\n    \n    def reset_to_defaults(self):\n        \"\"\"Reset all settings to default values\"\"\"\n        self.__init__()\n    \n    def get_supported_operations(self) -> list:\n        \"\"\"Get list of supported calculator operations\"\"\"\n        return [\n            \"add\", \"subtract\", \"multiply\", \"divide\", \n            \"power\", \"square_root\", \"average\"\n        ]"
  },
  {
    "file": "/Users/user/Desktop/Akshay/llm-code-context-optimizer/sample_project/test_calculator.py",
    "chunk": "\"\"\"\nSimple tests for the calculator application\n\"\"\"\n\nimport unittest\nimport os\nimport tempfile\nfrom calculator import Calculator\nfrom file_handler import FileHandler\nfrom config import Config\n\nclass TestCalculator(unittest.TestCase):\n    \"\"\"Test cases for the Calculator class\"\"\"\n    \n    def setUp(self):\n        \"\"\"Set up test fixtures before each test method\"\"\"\n        self.calc = Calculator()\n    \n    def test_addition(self):\n        \"\"\"Test addition operation\"\"\"\n        result = self.calc.add(2, 3)\n        self.assertEqual(result, 5)\n        \n        result = self.calc.add(-1, 1)\n        self.assertEqual(result, 0)\n        \n        result = self.calc.add(0.1, 0.2)\n        self.assertAlmostEqual(result, 0.3, places=10)\n    \n    def test_subtraction(self):\n        \"\"\"Test subtraction operation\"\"\"\n        result = self.calc.subtract(5, 3)\n        self.assertEqual(result, 2)\n        \n        result = self.calc.subtract(0, 5)\n        self.assertEqual(result, -5)\n    \n    def test_multiplication(self):\n        \"\"\"Test multiplication operation\"\"\"\n        result = self.calc.multiply(3, 4)\n        self.assertEqual(result, 12)\n        \n        result = self.calc.multiply(-2, 3)\n        self.assertEqual(result, -6)\n        \n        result = self.calc.multiply(0, 100)\n        self.assertEqual(result, 0)\n    \n    def test_division(self):\n        \"\"\"Test division operation\"\"\""
  },
  {
    "file": "/Users/user/Desktop/Akshay/llm-code-context-optimizer/sample_project/test_calculator.py",
    "chunk": "result = self.calc.divide(10, 2)\n        self.assertEqual(result, 5)\n        \n        result = self.calc.divide(7, 2)\n        self.assertEqual(result, 3.5)\n        \n        # Test division by zero\n        with self.assertRaises(ValueError):\n            self.calc.divide(5, 0)\n    \n    def test_power(self):\n        \"\"\"Test power operation\"\"\"\n        result = self.calc.power(2, 3)\n        self.assertEqual(result, 8)\n        \n        result = self.calc.power(5, 0)\n        self.assertEqual(result, 1)\n    \n    def test_square_root(self):\n        \"\"\"Test square root operation\"\"\"\n        result = self.calc.square_root(9)\n        self.assertEqual(result, 3)\n        \n        result = self.calc.square_root(0)\n        self.assertEqual(result, 0)\n        \n        # Test negative number\n        with self.assertRaises(ValueError):\n            self.calc.square_root(-1)\n    \n    def test_history_tracking(self):\n        \"\"\"Test that operations are recorded in history\"\"\"\n        self.calc.add(1, 2)\n        self.calc.multiply(3, 4)\n        \n        history = self.calc.get_history()\n        self.assertEqual(len(history), 2)\n        self.assertIn(\"1 + 2 = 3\", history[0])\n        self.assertIn(\"3 \u00d7 4 = 12\", history[1])\n    \n    def test_average_calculation(self):\n        \"\"\"Test average calculation\"\"\"\n        numbers = [1, 2, 3, 4, 5]\n        result = self.calc.calculate_average(numbers)\n        self.assertEqual(result, 3.0)\n        \n        # Test empty list\n        with self.assertRaises(ValueError):\n            self.calc.calculate_average([])"
  },
  {
    "file": "/Users/user/Desktop/Akshay/llm-code-context-optimizer/sample_project/test_calculator.py",
    "chunk": "class TestCalculator(unittest.TestCase):\n    \"\"\"Test cases for the Calculator class\"\"\"\n    \n    def setUp(self):\n        \"\"\"Set up test fixtures before each test method\"\"\"\n        self.calc = Calculator()\n    \n    def test_addition(self):\n        \"\"\"Test addition operation\"\"\"\n        result = self.calc.add(2, 3)\n        self.assertEqual(result, 5)\n        \n        result = self.calc.add(-1, 1)\n        self.assertEqual(result, 0)\n        \n        result = self.calc.add(0.1, 0.2)\n        self.assertAlmostEqual(result, 0.3, places=10)\n    \n    def test_subtraction(self):\n        \"\"\"Test subtraction operation\"\"\"\n        result = self.calc.subtract(5, 3)\n        self.assertEqual(result, 2)\n        \n        result = self.calc.subtract(0, 5)\n        self.assertEqual(result, -5)\n    \n    def test_multiplication(self):\n        \"\"\"Test multiplication operation\"\"\"\n        result = self.calc.multiply(3, 4)\n        self.assertEqual(result, 12)\n        \n        result = self.calc.multiply(-2, 3)\n        self.assertEqual(result, -6)\n        \n        result = self.calc.multiply(0, 100)\n        self.assertEqual(result, 0)\n    \n    def test_division(self):\n        \"\"\"Test division operation\"\"\"\n        result = self.calc.divide(10, 2)\n        self.assertEqual(result, 5)\n        \n        result = self.calc.divide(7, 2)\n        self.assertEqual(result, 3.5)\n        \n        # Test division by zero\n        with self.assertRaises(ValueError):\n            self.calc.divide(5, 0)\n    \n    def test_power(self):"
  },
  {
    "file": "/Users/user/Desktop/Akshay/llm-code-context-optimizer/sample_project/test_calculator.py",
    "chunk": "\"\"\"Test power operation\"\"\"\n        result = self.calc.power(2, 3)\n        self.assertEqual(result, 8)\n        \n        result = self.calc.power(5, 0)\n        self.assertEqual(result, 1)\n    \n    def test_square_root(self):\n        \"\"\"Test square root operation\"\"\"\n        result = self.calc.square_root(9)\n        self.assertEqual(result, 3)\n        \n        result = self.calc.square_root(0)\n        self.assertEqual(result, 0)\n        \n        # Test negative number\n        with self.assertRaises(ValueError):\n            self.calc.square_root(-1)\n    \n    def test_history_tracking(self):\n        \"\"\"Test that operations are recorded in history\"\"\"\n        self.calc.add(1, 2)\n        self.calc.multiply(3, 4)\n        \n        history = self.calc.get_history()\n        self.assertEqual(len(history), 2)\n        self.assertIn(\"1 + 2 = 3\", history[0])\n        self.assertIn(\"3 \u00d7 4 = 12\", history[1])\n    \n    def test_average_calculation(self):\n        \"\"\"Test average calculation\"\"\"\n        numbers = [1, 2, 3, 4, 5]\n        result = self.calc.calculate_average(numbers)\n        self.assertEqual(result, 3.0)\n        \n        # Test empty list\n        with self.assertRaises(ValueError):\n            self.calc.calculate_average([])\n\nclass TestFileHandler(unittest.TestCase):\n    \"\"\"Test cases for the FileHandler class\"\"\"\n    \n    def setUp(self):\n        \"\"\"Set up test fixtures\"\"\"\n        # Use temporary file for testing\n        self.temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.json')\n        self.temp_file.close()\n        self.file_handler = FileHandler(self.temp_file.name)\n    \n    def tearDown(self):"
  },
  {
    "file": "/Users/user/Desktop/Akshay/llm-code-context-optimizer/sample_project/test_calculator.py",
    "chunk": "\"\"\"Clean up after tests\"\"\"\n        if os.path.exists(self.temp_file.name):\n            os.unlink(self.temp_file.name)\n    \n    def test_save_and_load_history(self):\n        \"\"\"Test saving and loading history\"\"\"\n        test_history = [\"[2024-01-01 12:00:00] 2 + 3 = 5\", \"[2024-01-01 12:01:00] 4 \u00d7 5 = 20\"]\n        \n        # Save history\n        success = self.file_handler.save_history(test_history)\n        self.assertTrue(success)\n        \n        # Load history\n        loaded_history = self.file_handler.load_history()\n        self.assertEqual(loaded_history, test_history)\n    \n    def test_file_info(self):\n        \"\"\"Test getting file information\"\"\"\n        info = self.file_handler.get_file_info()\n        self.assertTrue(info[\"exists\"])\n        self.assertIn(\"size_bytes\", info)\n        self.assertIn(\"modified_time\", info)"
  },
  {
    "file": "/Users/user/Desktop/Akshay/llm-code-context-optimizer/sample_project/test_calculator.py",
    "chunk": "class TestFileHandler(unittest.TestCase):\n    \"\"\"Test cases for the FileHandler class\"\"\"\n    \n    def setUp(self):\n        \"\"\"Set up test fixtures\"\"\"\n        # Use temporary file for testing\n        self.temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.json')\n        self.temp_file.close()\n        self.file_handler = FileHandler(self.temp_file.name)\n    \n    def tearDown(self):\n        \"\"\"Clean up after tests\"\"\"\n        if os.path.exists(self.temp_file.name):\n            os.unlink(self.temp_file.name)\n    \n    def test_save_and_load_history(self):\n        \"\"\"Test saving and loading history\"\"\"\n        test_history = [\"[2024-01-01 12:00:00] 2 + 3 = 5\", \"[2024-01-01 12:01:00] 4 \u00d7 5 = 20\"]\n        \n        # Save history\n        success = self.file_handler.save_history(test_history)\n        self.assertTrue(success)\n        \n        # Load history\n        loaded_history = self.file_handler.load_history()\n        self.assertEqual(loaded_history, test_history)\n    \n    def test_file_info(self):\n        \"\"\"Test getting file information\"\"\"\n        info = self.file_handler.get_file_info()\n        self.assertTrue(info[\"exists\"])\n        self.assertIn(\"size_bytes\", info)\n        self.assertIn(\"modified_time\", info)\n\nclass TestConfig(unittest.TestCase):\n    \"\"\"Test cases for the Config class\"\"\"\n    \n    def test_default_configuration(self):\n        \"\"\"Test default configuration values\"\"\"\n        config = Config()\n        \n        self.assertEqual(config.app_name, \"Simple Calculator\")\n        self.assertEqual(config.version, \"1.0.0\")\n        self.assertIsInstance(config.decimal_places, int)\n        self.assertIsInstance(config.auto_save, bool)\n    \n    def test_configuration_validation(self):\n        \"\"\"Test configuration validation\"\"\"\n        config = Config()\n        validation = config.validate_settings()"
  },
  {
    "file": "/Users/user/Desktop/Akshay/llm-code-context-optimizer/sample_project/test_calculator.py",
    "chunk": "self.assertIn(\"valid\", validation)\n        self.assertIn(\"issues\", validation)\n        self.assertIn(\"settings\", validation)\n    \n    def test_supported_operations(self):\n        \"\"\"Test getting supported operations\"\"\"\n        config = Config()\n        operations = config.get_supported_operations()\n        \n        self.assertIn(\"add\", operations)\n        self.assertIn(\"multiply\", operations)\n        self.assertIn(\"divide\", operations)"
  },
  {
    "file": "/Users/user/Desktop/Akshay/llm-code-context-optimizer/sample_project/test_calculator.py",
    "chunk": "class TestConfig(unittest.TestCase):\n    \"\"\"Test cases for the Config class\"\"\"\n    \n    def test_default_configuration(self):\n        \"\"\"Test default configuration values\"\"\"\n        config = Config()\n        \n        self.assertEqual(config.app_name, \"Simple Calculator\")\n        self.assertEqual(config.version, \"1.0.0\")\n        self.assertIsInstance(config.decimal_places, int)\n        self.assertIsInstance(config.auto_save, bool)\n    \n    def test_configuration_validation(self):\n        \"\"\"Test configuration validation\"\"\"\n        config = Config()\n        validation = config.validate_settings()\n        \n        self.assertIn(\"valid\", validation)\n        self.assertIn(\"issues\", validation)\n        self.assertIn(\"settings\", validation)\n    \n    def test_supported_operations(self):\n        \"\"\"Test getting supported operations\"\"\"\n        config = Config()\n        operations = config.get_supported_operations()\n        \n        self.assertIn(\"add\", operations)\n        self.assertIn(\"multiply\", operations)\n        self.assertIn(\"divide\", operations)\n\ndef run_tests():\n    \"\"\"Run all tests\"\"\"\n    unittest.main(verbosity=2)\n\nif __name__ == \"__main__\":\n    run_tests()"
  },
  {
    "file": "/Users/user/Desktop/Akshay/llm-code-context-optimizer/sample_project/calculator.py",
    "chunk": "\"\"\"\nCalculator module for basic arithmetic operations\n\"\"\"\n\nfrom typing import List\nfrom datetime import datetime\n\nclass Calculator:\n    \"\"\"A simple calculator class that performs basic arithmetic operations\"\"\"\n    \n    def __init__(self):\n        \"\"\"Initialize calculator with empty history\"\"\"\n        self.history = []\n    \n    def add(self, a: float, b: float) -> float:\n        \"\"\"Add two numbers and record the operation\"\"\"\n        result = a + b\n        self._record_operation(f\"{a} + {b} = {result}\")\n        return result\n    \n    def subtract(self, a: float, b: float) -> float:\n        \"\"\"Subtract second number from first and record the operation\"\"\"\n        result = a - b\n        self._record_operation(f\"{a} - {b} = {result}\")\n        return result\n    \n    def multiply(self, a: float, b: float) -> float:\n        \"\"\"Multiply two numbers and record the operation\"\"\"\n        result = a * b\n        self._record_operation(f\"{a} \u00d7 {b} = {result}\")\n        return result\n    \n    def divide(self, a: float, b: float) -> float:\n        \"\"\"Divide first number by second and record the operation\"\"\"\n        \n        result = a / b\n        self._record_operation(f\"{a} \u00f7 {b} = {result}\")\n        return result\n    \n    def power(self, base: float, exponent: float) -> float:\n        \"\"\"Raise base to the power of exponent\"\"\"\n        result = base ** exponent\n        self._record_operation(f\"{base} ^ {exponent} = {result}\")\n        return result\n    \n    def square_root(self, number: float) -> float:\n        \"\"\"Calculate square root of a number\"\"\"\n        if number < 0:\n            raise ValueError(\"Cannot calculate square root of negative number\")"
  },
  {
    "file": "/Users/user/Desktop/Akshay/llm-code-context-optimizer/sample_project/calculator.py",
    "chunk": "result = number ** 0.5\n        self._record_operation(f\"\u221a{number} = {result}\")\n        return result\n    \n    def _record_operation(self, operation: str):\n        \"\"\"Record an operation in the history with timestamp\"\"\"\n        timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        self.history.append(f\"[{timestamp}] {operation}\")\n        \n        # Keep only last 50 operations to prevent memory issues\n        if len(self.history) > 50:\n            self.history = self.history[-50:]\n    \n    def get_history(self) -> List[str]:\n        \"\"\"Get the calculation history\"\"\"\n        return self.history.copy()\n    \n    def set_history(self, history: List[str]):\n        \"\"\"Set the calculation history\"\"\"\n        self.history = history.copy()\n    \n    def clear_history(self):\n        \"\"\"Clear the calculation history\"\"\"\n        self.history.clear()\n    \n    def get_last_result(self) -> str:\n        \"\"\"Get the last calculation result\"\"\"\n        if self.history:\n            return self.history[-1]\n        return \"No calculations performed yet\"\n    \n    def calculate_average(self, numbers: List[float]) -> float:\n        \"\"\"Calculate the average of a list of numbers\"\"\"\n        if not numbers:\n            raise ValueError(\"Cannot calculate average of empty list\")\n        \n        result = sum(numbers) / len(numbers)\n        self._record_operation(f\"Average of {numbers} = {result}\")\n        return result"
  },
  {
    "file": "/Users/user/Desktop/Akshay/llm-code-context-optimizer/sample_project/main.py",
    "chunk": "#!/usr/bin/env python3\n\"\"\"\nSimple Calculator Application\nA basic Python project to test the LLM Code Context Optimizer\n\nThis is a simple calculator that can:\n- Perform basic arithmetic operations\n- Save calculation history to file\n- Load previous calculations\n\"\"\"\n\nfrom calculator import Calculator\nfrom file_handler import FileHandler\nfrom config import Config\n\ndef main():\n    \"\"\"Main entry point for the calculator application\"\"\"\n    print(\"=== Simple Calculator ===\")\n    print(\"Commands: add, subtract, multiply, divide, history, save, load, quit\")\n    \n    # Initialize components\n    config = Config()\n    file_handler = FileHandler(config.history_file)\n    calculator = Calculator()\n    \n    # Load previous history\n    history = file_handler.load_history()\n    calculator.set_history(history)\n    \n    while True:\n        try:\n            command = input(\"\\nEnter command: \").strip().lower()\n            \n            if command == \"quit\":\n                # Save history before exiting\n                file_handler.save_history(calculator.get_history())\n                print(\"Goodbye!\")\n                break\n            \n            elif command == \"add\":\n                a = float(input(\"Enter first number: \"))\n                b = float(input(\"Enter second number: \"))\n                result = calculator.add(a, b)\n                print(f\"Result: {result}\")\n            \n            elif command == \"subtract\":\n                a = float(input(\"Enter first number: \"))\n                b = float(input(\"Enter second number: \"))\n                result = calculator.subtract(a, b)\n                print(f\"Result: {result}\")"
  },
  {
    "file": "/Users/user/Desktop/Akshay/llm-code-context-optimizer/sample_project/main.py",
    "chunk": "elif command == \"multiply\":\n                a = float(input(\"Enter first number: \"))\n                b = float(input(\"Enter second number: \"))\n                result = calculator.multiply(a, b)\n                print(f\"Result: {result}\")\n            \n            elif command == \"divide\":\n                a = float(input(\"Enter first number: \"))\n                b = float(input(\"Enter second number: \"))\n                result = calculator.divide(a, b)\n                print(f\"Result: {result}\")\n            \n            elif command == \"history\":\n                history = calculator.get_history()\n                if history:\n                    print(\"\\nCalculation History:\")\n                    for i, calc in enumerate(history, 1):\n                        print(f\"{i}. {calc}\")\n                else:\n                    print(\"No history available\")\n            \n            elif command == \"save\":\n                file_handler.save_history(calculator.get_history())\n                print(\"History saved successfully!\")\n            \n            elif command == \"load\":\n                history = file_handler.load_history()\n                calculator.set_history(history)\n                print(f\"Loaded {len(history)} calculations from history\")\n            \n            else:\n                print(\"Unknown command. Available: add, subtract, multiply, divide, history, save, load, quit\")\n        \n        except ValueError as e:\n            print(f\"Invalid input: {e}\")\n        except Exception as e:\n            print(f\"Error: {e}\")\n\nif __name__ == \"__main__\":\n    main()"
  }
]